{"ast":null,"code":"var _jsxFileName = \"/Users/virajparekh/cjv805/stream-go/src/components/DarkModeToggle.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"../styles/DarkMode.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DarkModeToggle = () => {\n  _s();\n  const [darkMode, setDarkMode] = useState(() => {\n    // Check localStorage first, then system preference\n    const savedMode = localStorage.getItem(\"darkMode\");\n    if (savedMode) {\n      return savedMode === \"enabled\";\n    }\n    return window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n  });\n  useEffect(() => {\n    if (darkMode) {\n      document.body.classList.add(\"dark-mode\");\n      localStorage.setItem(\"darkMode\", \"enabled\");\n    } else {\n      document.body.classList.remove(\"dark-mode\");\n      localStorage.setItem(\"darkMode\", \"disabled\");\n    }\n  }, [darkMode]);\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"dark-mode-toggle\",\n    onClick: () => setDarkMode(!darkMode),\n    \"aria-label\": darkMode ? \"Switch to light mode\" : \"Switch to dark mode\",\n    children: darkMode ? \"‚òÄÔ∏è Light Mode\" : \"üåô Dark Mode\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(DarkModeToggle, \"U2X5iY02OlnCXgtQXs3XY9KdxqI=\");\n_c = DarkModeToggle;\nexport default DarkModeToggle;\nvar _c;\n$RefreshReg$(_c, \"DarkModeToggle\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","DarkModeToggle","_s","darkMode","setDarkMode","savedMode","localStorage","getItem","window","matchMedia","matches","document","body","classList","add","setItem","remove","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/virajparekh/cjv805/stream-go/src/components/DarkModeToggle.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"../styles/DarkMode.css\";\n\nconst DarkModeToggle = () => {\n  const [darkMode, setDarkMode] = useState(() => {\n    // Check localStorage first, then system preference\n    const savedMode = localStorage.getItem(\"darkMode\");\n    if (savedMode) {\n      return savedMode === \"enabled\";\n    }\n    return window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n  });\n\n  useEffect(() => {\n    if (darkMode) {\n      document.body.classList.add(\"dark-mode\");\n      localStorage.setItem(\"darkMode\", \"enabled\");\n    } else {\n      document.body.classList.remove(\"dark-mode\");\n      localStorage.setItem(\"darkMode\", \"disabled\");\n    }\n  }, [darkMode]);\n\n  return (\n    <button \n      className=\"dark-mode-toggle\" \n      onClick={() => setDarkMode(!darkMode)}\n      aria-label={darkMode ? \"Switch to light mode\" : \"Switch to dark mode\"}\n    >\n      {darkMode ? \"‚òÄÔ∏è Light Mode\" : \"üåô Dark Mode\"}\n    </button>\n  );\n};\n\nexport default DarkModeToggle;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,MAAM;IAC7C;IACA,MAAMO,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IAClD,IAAIF,SAAS,EAAE;MACb,OAAOA,SAAS,KAAK,SAAS;IAChC;IACA,OAAOG,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO;EAClE,CAAC,CAAC;EAEFb,SAAS,CAAC,MAAM;IACd,IAAIM,QAAQ,EAAE;MACZQ,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,GAAG,CAAC,WAAW,CAAC;MACxCR,YAAY,CAACS,OAAO,CAAC,UAAU,EAAE,SAAS,CAAC;IAC7C,CAAC,MAAM;MACLJ,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACG,MAAM,CAAC,WAAW,CAAC;MAC3CV,YAAY,CAACS,OAAO,CAAC,UAAU,EAAE,UAAU,CAAC;IAC9C;EACF,CAAC,EAAE,CAACZ,QAAQ,CAAC,CAAC;EAEd,oBACEH,OAAA;IACEiB,SAAS,EAAC,kBAAkB;IAC5BC,OAAO,EAAEA,CAAA,KAAMd,WAAW,CAAC,CAACD,QAAQ,CAAE;IACtC,cAAYA,QAAQ,GAAG,sBAAsB,GAAG,qBAAsB;IAAAgB,QAAA,EAErEhB,QAAQ,GAAG,eAAe,GAAG;EAAc;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtC,CAAC;AAEb,CAAC;AAACrB,EAAA,CA7BID,cAAc;AAAAuB,EAAA,GAAdvB,cAAc;AA+BpB,eAAeA,cAAc;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}