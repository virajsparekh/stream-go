{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: true\n});\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Handle unauthorized (redirect to login)\n    localStorage.removeItem('authToken');\n    window.location = '/login';\n  }\n  return Promise.reject(error);\n});\nexport default {\n  movies: {\n    getFeatured: () => api.get('/movies/featured'),\n    getAll: () => api.get('/movies'),\n    getById: id => api.get(`/movies/${id}`),\n    search: query => api.get(`/movies/search?title=${query}`)\n  },\n  tvshows: {\n    getFeatured: () => api.get('/tvshows/featured'),\n    getAll: () => api.get('/tvshows'),\n    getById: id => api.get(`/tvshows/${id}`),\n    search: query => api.get(`/tvshows/search?title=${query}`)\n  },\n  auth: {\n    register: user => api.post('/users/register', user),\n    login: credentials => api.post('/users/authenticate', credentials)\n  },\n  users: {\n    getById: id => api.get(`/users/${id}`)\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","withCredentials","interceptors","request","use","config","token","localStorage","getItem","Authorization","response","error","_error$response","status","removeItem","window","location","Promise","reject","movies","getFeatured","get","getAll","getById","id","search","query","tvshows","auth","register","user","post","login","credentials","users"],"sources":["/Users/virajparekh/cjv805/stream-go/src/api/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  withCredentials: true \n});\n\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\napi.interceptors.response.use(\n  response => response,\n  error => {\n    if (error.response?.status === 401) {\n      // Handle unauthorized (redirect to login)\n      localStorage.removeItem('authToken');\n      window.location = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default {\n  movies: {\n    getFeatured: () => api.get('/movies/featured'),\n    getAll: () => api.get('/movies'),\n    getById: (id) => api.get(`/movies/${id}`),\n    search: (query) => api.get(`/movies/search?title=${query}`)\n  },\n  tvshows: {\n    getFeatured: () => api.get('/tvshows/featured'),\n    getAll: () => api.get('/tvshows'),\n    getById: (id) => api.get(`/tvshows/${id}`),\n    search: (query) => api.get(`/tvshows/search?title=${query}`)\n  },\n  auth: {\n    register: (user) => api.post('/users/register', user),\n    login: (credentials) => api.post('/users/authenticate', credentials)\n  },\n  users: {\n    getById: (id) => api.get(`/users/${id}`)\n  }\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAEjF,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB,CAAC;EACDC,eAAe,EAAE;AACnB,CAAC,CAAC;AAEFJ,GAAG,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;EACrC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAC/C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACL,OAAO,CAACS,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;AAEFR,GAAG,CAACK,YAAY,CAACQ,QAAQ,CAACN,GAAG,CAC3BM,QAAQ,IAAIA,QAAQ,EACpBC,KAAK,IAAI;EAAA,IAAAC,eAAA;EACP,IAAI,EAAAA,eAAA,GAAAD,KAAK,CAACD,QAAQ,cAAAE,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClC;IACAN,YAAY,CAACO,UAAU,CAAC,WAAW,CAAC;IACpCC,MAAM,CAACC,QAAQ,GAAG,QAAQ;EAC5B;EACA,OAAOC,OAAO,CAACC,MAAM,CAACP,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAe;EACbQ,MAAM,EAAE;IACNC,WAAW,EAAEA,CAAA,KAAMvB,GAAG,CAACwB,GAAG,CAAC,kBAAkB,CAAC;IAC9CC,MAAM,EAAEA,CAAA,KAAMzB,GAAG,CAACwB,GAAG,CAAC,SAAS,CAAC;IAChCE,OAAO,EAAGC,EAAE,IAAK3B,GAAG,CAACwB,GAAG,CAAC,WAAWG,EAAE,EAAE,CAAC;IACzCC,MAAM,EAAGC,KAAK,IAAK7B,GAAG,CAACwB,GAAG,CAAC,wBAAwBK,KAAK,EAAE;EAC5D,CAAC;EACDC,OAAO,EAAE;IACPP,WAAW,EAAEA,CAAA,KAAMvB,GAAG,CAACwB,GAAG,CAAC,mBAAmB,CAAC;IAC/CC,MAAM,EAAEA,CAAA,KAAMzB,GAAG,CAACwB,GAAG,CAAC,UAAU,CAAC;IACjCE,OAAO,EAAGC,EAAE,IAAK3B,GAAG,CAACwB,GAAG,CAAC,YAAYG,EAAE,EAAE,CAAC;IAC1CC,MAAM,EAAGC,KAAK,IAAK7B,GAAG,CAACwB,GAAG,CAAC,yBAAyBK,KAAK,EAAE;EAC7D,CAAC;EACDE,IAAI,EAAE;IACJC,QAAQ,EAAGC,IAAI,IAAKjC,GAAG,CAACkC,IAAI,CAAC,iBAAiB,EAAED,IAAI,CAAC;IACrDE,KAAK,EAAGC,WAAW,IAAKpC,GAAG,CAACkC,IAAI,CAAC,qBAAqB,EAAEE,WAAW;EACrE,CAAC;EACDC,KAAK,EAAE;IACLX,OAAO,EAAGC,EAAE,IAAK3B,GAAG,CAACwB,GAAG,CAAC,UAAUG,EAAE,EAAE;EACzC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}