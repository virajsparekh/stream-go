{"ast":null,"code":"var _jsxFileName = \"/Users/virajparekh/cjv805/stream-go/src/pages/TVShows.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport MovieCard from \"../components/MovieCard\";\nimport \"../styles/TVShows.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TVShows = () => {\n  _s();\n  const [tvShows, setTvShows] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchTvShows = async () => {\n      try {\n        setLoading(true);\n        const res = await axios.get(\"http://localhost:5004/tvShows\");\n        setTvShows(res.data || []);\n      } catch (err) {\n        setError(\"Failed to fetch TV Shows.\");\n        console.error(\"Error:\", err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchTvShows();\n  }, []);\n\n  // Group TV shows by language\n  const groupByLanguage = items => {\n    return items.reduce((acc, item) => {\n      const language = item.language || \"Unknown\";\n      if (!acc[language]) {\n        acc[language] = [];\n      }\n      acc[language].push(item);\n      return acc;\n    }, {});\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"error\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 21\n  }, this);\n  const tvShowsByLanguage = groupByLanguage(tvShows);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tvshows-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"All TV Shows\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movies-grid\",\n      children: tvShows.length > 0 ? tvShows.map(show => /*#__PURE__*/_jsxDEV(MovieCard, {\n        id: show.id,\n        poster: show.poster,\n        type: \"tvshow\"\n      }, show.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No TV shows available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), Object.keys(tvShowsByLanguage).map(language => /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [language, \" TV Shows\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movies-grid\",\n        children: tvShowsByLanguage[language].map(show => /*#__PURE__*/_jsxDEV(MovieCard, {\n          id: show.id,\n          poster: show.poster,\n          type: \"tvshow\"\n        }, show.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)]\n    }, language, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(TVShows, \"5lxYQDGqHGHFAXR4rk1c9P7c1VM=\");\n_c = TVShows;\nexport default TVShows;\nvar _c;\n$RefreshReg$(_c, \"TVShows\");","map":{"version":3,"names":["React","useEffect","useState","axios","MovieCard","jsxDEV","_jsxDEV","TVShows","_s","tvShows","setTvShows","loading","setLoading","error","setError","fetchTvShows","res","get","data","err","console","groupByLanguage","items","reduce","acc","item","language","push","children","fileName","_jsxFileName","lineNumber","columnNumber","className","tvShowsByLanguage","length","map","show","id","poster","type","Object","keys","_c","$RefreshReg$"],"sources":["/Users/virajparekh/cjv805/stream-go/src/pages/TVShows.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport MovieCard from \"../components/MovieCard\";\nimport \"../styles/TVShows.css\";\n\nconst TVShows = () => {\n  const [tvShows, setTvShows] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchTvShows = async () => {\n      try {\n        setLoading(true);\n        const res = await axios.get(\"http://localhost:5004/tvShows\");\n        setTvShows(res.data || []);\n      } catch (err) {\n        setError(\"Failed to fetch TV Shows.\");\n        console.error(\"Error:\", err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchTvShows();\n  }, []);\n\n  // Group TV shows by language\n  const groupByLanguage = (items) => {\n    return items.reduce((acc, item) => {\n      const language = item.language || \"Unknown\";\n      if (!acc[language]) {\n        acc[language] = [];\n      }\n      acc[language].push(item);\n      return acc;\n    }, {});\n  };\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p className=\"error\">{error}</p>;\n\n  const tvShowsByLanguage = groupByLanguage(tvShows);\n\n  return (\n    <div className=\"tvshows-page\">\n      <h2>All TV Shows</h2>\n      <div className=\"movies-grid\">\n        {tvShows.length > 0 ? (\n          tvShows.map((show) => (\n            <MovieCard\n              key={show.id}\n              id={show.id}\n              poster={show.poster}\n              type=\"tvshow\"\n            />\n          ))\n        ) : (\n          <p>No TV shows available.</p>\n        )}\n      </div>\n\n      {/* Language-Specific TV Shows Sections */}\n      {Object.keys(tvShowsByLanguage).map((language) => (\n        <section key={language}>\n          <h3>{language} TV Shows</h3>\n          <div className=\"movies-grid\">\n            {tvShowsByLanguage[language].map((show) => (\n              <MovieCard\n                key={show.id}\n                id={show.id}\n                poster={show.poster}\n                type=\"tvshow\"\n              />\n            ))}\n          </div>\n        </section>\n      ))}\n    </div>\n  );\n};\n\nexport default TVShows;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}